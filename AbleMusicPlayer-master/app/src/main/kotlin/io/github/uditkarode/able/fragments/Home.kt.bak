/*
    Copyright 2020 Udit Karode <udit.karode@gmail.com>

    This file is part of AbleMusicPlayer.

    AbleMusicPlayer is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    AbleMusicPlayer is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AbleMusicPlayer.  If not, see <https://www.gnu.org/licenses/>.
*/

package io.github.uditkarode.able.fragments

import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.graphics.Bitmap
import android.os.Build
import android.os.Bundle
import android.os.IBinder
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.preference.PreferenceManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.arthenica.mobileffmpeg.Config
import com.arthenica.mobileffmpeg.FFmpeg
import com.bumptech.glide.Glide
import com.bumptech.glide.load.DataSource
import com.bumptech.glide.load.engine.DiskCacheStrategy
import com.bumptech.glide.load.engine.GlideException
import com.bumptech.glide.request.RequestListener
import com.bumptech.glide.request.target.Target
import com.bumptech.glide.signature.ObjectKey
import com.google.android.material.tabs.TabLayout
import com.google.gson.annotations.SerializedName
import io.github.uditkarode.able.R
import io.github.uditkarode.able.activities.Settings
import io.github.uditkarode.able.adapters.SongAdapter
import io.github.uditkarode.able.adapters.TrendingAdapter
import io.github.uditkarode.able.databinding.HomeBinding
import io.github.uditkarode.able.model.CacheStatus
import io.github.uditkarode.able.model.Format
import io.github.uditkarode.able.model.song.Song
import io.github.uditkarode.able.model.song.SongState
import io.github.uditkarode.able.services.MusicService
import io.github.uditkarode.able.utils.Constants
import io.github.uditkarode.able.utils.Shared
import io.github.uditkarode.able.utils.SwipeController
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancelChildren
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import okhttp3.OkHttpClient
import okhttp3.Request
import org.schabi.newpipe.extractor.stream.StreamInfo
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import java.io.BufferedInputStream
import java.io.File
import java.io.FileOutputStream
import java.lang.ref.WeakReference
import java.util.*
import java.util.concurrent.TimeUnit

@ExperimentalCoroutinesApi
class Home : Fragment(), CoroutineScope, MusicService.MusicClient {
    private lateinit var okClient: OkHttpClient
    private lateinit var serviceConn: ServiceConnection
    private lateinit var binding: HomeBinding

    private var songList = ArrayList<Song>()
    private var trendingSongs = ArrayList<Song>()
    private var songId = "temp"
    private var lastTrendingUpdateTime: Long = 0

    var isBound = false
    var mService: MutableStateFlow<MusicService?> = MutableStateFlow(null)

    private lateinit var songAdapter: SongAdapter
    private lateinit var trendingAdapter: TrendingAdapter
    private lateinit var lastFmApi: LastFmApiService

    override val coroutineContext = Dispatchers.Main + SupervisorJob()

    companion object {
        private const val LAST_FM_BASE_URL = "https://ws.audioscrobbler.com/2.0/"
        private const val TRENDING_CACHE_TIME_MS = 6 * 60 * 60 * 1000 // 6 hours cache
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = HomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        okClient = OkHttpClient()
        initializeRetrofit()
        setupRecyclerViews()
        setupTabLayout()
        setupClickListeners()

        if (songList.isEmpty()) {
            loadLocalSongs()
        }

        loadTrendingSongs()
        bindEvent()
    }

    private fun initializeRetrofit() {
        val okHttpClient = OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .build()

        val retrofit = Retrofit.Builder()
            .baseUrl(LAST_FM_BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        lastFmApi = retrofit.create(LastFmApiService::class.java)
    }

    private fun setupRecyclerViews() {
        // Main songs list
        songAdapter = SongAdapter(songList, WeakReference(this), true)
        binding.songs.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = songAdapter
            ItemTouchHelper(SwipeController(context, "Home", mService)).attachToRecyclerView(this)
        }

        // Trending songs horizontal list
        trendingAdapter = TrendingAdapter(trendingSongs, WeakReference(this))
        binding.trendingSongs.apply {
            layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
            adapter = trendingAdapter
        }
    }

    private fun setupTabLayout() {
        binding.tabs.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {
            override fun onTabSelected(tab: TabLayout.Tab?) {
                when (tab?.position) {
                    0 -> showTrendingContent()
                    1 -> showLibraryContent()
                }
            }

            override fun onTabUnselected(tab: TabLayout.Tab?) {}
            override fun onTabReselected(tab: TabLayout.Tab?) {}
        })
    }

    private fun setupClickListeners() {
        binding.settings.setOnClickListener {
            startActivity(Intent(requireContext(), Settings::class.java))
        }
    }

    private fun showTrendingContent() {
        binding.trendingSongs.visibility = View.VISIBLE
        binding.songs.visibility = View.GONE
    }

    private fun showLibraryContent() {
        binding.trendingSongs.visibility = View.GONE
        binding.songs.visibility = View.VISIBLE
    }

    private fun loadLocalSongs() {
        songList = Shared.getSongList(Constants.ableSongDir)
        songList.addAll(Shared.getLocalSongs(requireContext()))
        if (songList.isNotEmpty()) {
            songList.sortBy { it.name.toUpperCase(Locale.getDefault()) }
        }
        songAdapter.update(songList)
    }

    private fun loadTrendingSongs() {
        val currentTime = System.currentTimeMillis()
        if (currentTime - lastTrendingUpdateTime < TRENDING_CACHE_TIME_MS) {
            return
        }

        launch(Dispatchers.IO) {
            try {
                val response = lastFmApi.getTrendingTracks()
                trendingSongs.clear()

                response.tracks.track.forEach { track ->
                    val imageUrl = track.images.lastOrNull { it.size == "extralarge" }?.url ?: ""
                    
                    trendingSongs.add(
                        Song(
                            name = track.name,
                            artist = track.artist.name,
                            ytmThumbnail = imageUrl,
                            youtubeLink = "ytsearch:${track.name} ${track.artist.name}",
                            filePath = "trending://${track.name}",
                            isTrending = true
                        )
                    )
                }

                lastTrendingUpdateTime = currentTime

                launch(Dispatchers.Main) {
                    trendingAdapter.update(trendingSongs)
                }
            } catch (e: Exception) {
                Log.e("TrendingError", "Failed to load trending songs", e)
                launch(Dispatchers.Main) {
                    Toast.makeText(
                        requireContext(),
                        "Failed to load trending songs",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        }
    }

    fun streamAudio(song: Song, toCache: Boolean) {
        if (song.isTrending) {
            launch(Dispatchers.IO) {
                try {
                    val searchQuery = song.youtubeLink.removePrefix("ytsearch:")
                    val searchResults = StreamInfo.getInfo(searchQuery)
                    
                    if (searchResults.audioStreams.isNotEmpty()) {
                        val firstResult = searchResults.audioStreams[0]
                        val playableSong = song.copy(
                            youtubeLink = firstResult.url,
                            filePath = firstResult.url
                        )
                        
                        launch(Dispatchers.Main) {
                            streamAudioInternal(playableSong, toCache)
                        }
                    } else {
                        launch(Dispatchers.Main) {
                            Toast.makeText(
                                requireContext(),
                                "No results found for ${song.name}",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
                } catch (e: Exception) {
                    launch(Dispatchers.Main) {
                        Toast.makeText(
                            requireContext(),
                            "Error searching for song",
                            Toast.LENGTH_SHORT
                        ).show()
                        Log.e("TrendingPlayError", e.toString())
                    }
                }
            }
        } else {
            streamAudioInternal(song, toCache)
        }
    }

    private fun streamAudioInternal(song: Song, toCache: Boolean) {
        var freshStart = false
        
        if (!Shared.serviceRunning(MusicService::class.java, requireContext())) {
            val intent = Intent(requireContext(), MusicService::class.java)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                requireActivity().startForegroundService(intent)
            } else {
                requireActivity().startService(intent)
            }
            bindEvent()
            freshStart = true
        }

        launch(Dispatchers.IO) {
            val playSong = {
                mService.value?.setQueue(arrayListOf(Song(name = getString(R.string.loading), artist = "")))
                mService.value?.setCurrentIndex(0)
                mService.value?.showNotif()

                try {
                    val streamInfo = StreamInfo.getInfo(song.youtubeLink)
                    val stream = streamInfo.audioStreams.last()
                    val url = stream.url
                    val bitrate = stream.averageBitrate
                    val ext = stream.getFormat()!!.suffix
                    songId = Shared.getIdFromLink(song.youtubeLink)

                    File(Constants.ableSongDir, "$songId.tmp.webm").takeIf { it.exists() }?.delete()

                    if (song.ytmThumbnail.isNotBlank()) {
                        Glide.with(requireContext())
                            .asBitmap()
                            .load(song.ytmThumbnail)
                            .diskCacheStrategy(DiskCacheStrategy.NONE)
                            .signature(ObjectKey("save"))
                            .skipMemoryCache(true)
                            .listener(object : RequestListener<Bitmap> {
                                override fun onResourceReady(
                                    resource: Bitmap?,
                                    model: Any?,
                                    target: Target<Bitmap>?,
                                    dataSource: DataSource?,
                                    isFirstResource: Boolean
                                ): Boolean {
                                    resource?.let {
                                        if (toCache) {
                                            if (cacheMusic(song, url, ext, bitrate)) {
                                                Shared.saveAlbumArtToDisk(
                                                    it,
                                                    File(Constants.albumArtDir, songId)
                                                )
                                            }
                                        } else {
                                            song.filePath = url
                                            Shared.saveStreamingAlbumArt(it, songId)
                                        }

                                        mService.value?.setQueue(arrayListOf(song))
                                        mService.value?.setIndex(0)
                                        MusicService.registeredClients.forEach { client -> 
                                            client.isLoading(false)
                                        }
                                        if (freshStart) {
                                            MusicService.registeredClients.forEach { 
                                                it.serviceStarted()
                                            }
                                        }
                                    }
                                    return false
                                }

                                override fun onLoadFailed(
                                    e: GlideException?,
                                    model: Any?,
                                    target: Target<Bitmap>?,
                                    isFirstResource: Boolean
                                ): Boolean = false
                            }).submit()
                    }
                } catch (e: Exception) {
                    launch(Dispatchers.Main) {
                        Toast.makeText(requireContext(), "Something went wrong!", Toast.LENGTH_SHORT).show()
                        MusicService.registeredClients.forEach { it.isLoading(false) }
                    }
                    Log.e("StreamError", e.toString())
                }
            }

            if (mService.value != null) playSong()
            else mService.collect { if (it != null) playSong() }
        }
    }

    fun cacheMusic(song: Song, songUrl: String, ext: String, bitrate: Int): Boolean {
        if (song.filePath.endsWith(ext)) return false

        song.cacheStatus = CacheStatus.STARTED
        song.filePath = "caching"
        song.streamMutexes = arrayOf(Mutex(), Mutex())

        GlobalScope.launch(Dispatchers.IO) {
            try {
                val req = Request.Builder().url(songUrl).build()
                val resp = okClient.newCall(req).execute()
                val body = resp.body!!
                val iStream = BufferedInputStream(body.byteStream())

                song.internalStream = ByteArray(body.contentLength().toInt())
                song.streams = arrayOf(
                    ByteArray(body.contentLength().toInt()),
                    ByteArray(body.contentLength().toInt())
                )

                var read: Int
                val data = ByteArray(1024)
                var off = 0

                while (iStream.read(data).also { read = it } != -1) {
                    for (i in 0 until read) {
                        song.internalStream[i + off] = data[i]
                    }
                    off += read

                    while (song.streamMutexes[0].isLocked && song.streamMutexes[1].isLocked) {
                        delay(50)
                    }

                    val streamNum = if (song.streamMutexes[0].isLocked) 1 else 0
                    song.streamMutexes[streamNum].withLock {
                        song.streams[streamNum] = song.internalStream
                    }

                    song.streamProg = (off * 100) / body.contentLength().toInt()
                }

                iStream.close()

                val tempFile = File("${Constants.ableSongDir.absolutePath}/$songId.tmp.$ext")
                tempFile.createNewFile()
                FileOutputStream(tempFile).write(song.internalStream)

                val format = if (PreferenceManager.getDefaultSharedPreferences(requireContext())
                        .getString("format_key", "webm") == "mp3") Format.MODE_MP3 
                    else Format.MODE_WEBM

                var command = "-i \"${tempFile.absolutePath}\" -c copy " +
                        "-metadata title=\"${song.name}\" " +
                        "-metadata artist=\"${song.artist}\" -y "

                if (format == Format.MODE_MP3 || Build.VERSION.SDK_INT <= Build.VERSION_CODES.M) {
                    command += "-vn -ab ${bitrate}k -c:a mp3 -ar 44100 "
                }

                command += "\"${tempFile.absolutePath.replace("tmp.$ext", "")}"
                command += if (format == Format.MODE_MP3) "mp3\"" else "$ext\""

                when (FFmpeg.execute(command)) {
                    Config.RETURN_CODE_SUCCESS -> {
                        tempFile.delete()
                        launch(Dispatchers.Main) {
                            updateSongList()
                        }
                    }
                    Config.RETURN_CODE_CANCEL -> {
                        Log.e("FFmpegError", "Command execution cancelled by user.")
                    }
                    else -> {
                        Log.e("FFmpegError", "Command execution failed with rc=$rc")
                    }
                }

                song.filePath = tempFile.absolutePath.replace("tmp.$ext", ext)
                song.cacheStatus = CacheStatus.NULL
                song.streamMutexes = arrayOf()
                song.internalStream = ByteArray(0)
                song.streams = arrayOf()
            } catch (e: Exception) {
                Log.e("CacheError", "Failed to cache music", e)
            }
        }

        return true
    }

    fun updateSongList() {
        songList = Shared.getSongList(Constants.ableSongDir)
        if (context != null) songList.addAll(Shared.getLocalSongs(requireContext()))
        songList.sortBy { it.name.toUpperCase(Locale.getDefault()) }
        launch(Dispatchers.Main) {
            songAdapter.update(songList)
        }
    }

    fun bindEvent() {
        if (Shared.serviceRunning(MusicService::class.java, requireContext())) {
            try {
                requireContext().bindService(
                    Intent(requireContext(), MusicService::class.java),
                    serviceConn, Context.BIND_AUTO_CREATE
                )
            } catch (e: Exception) {
                Log.e("ServiceBindError", e.toString())
            }
        }
    }

    // MusicClient interface methods
    override fun playStateChanged(state: SongState) {}
    override fun songChanged() {}
    override fun durationChanged(duration: Int) {}
    override fun isExiting() {}
    override fun queueChanged(arrayList: ArrayList<Song>) {}
    override fun shuffleRepeatChanged(onShuffle: Boolean, onRepeat: Boolean) {}
    override fun indexChanged(index: Int) {}
    override fun isLoading(doLoad: Boolean) {}
    override fun spotifyImportChange(starting: Boolean) {}
    override fun serviceStarted() { bindEvent() }

    // Last.fm API interfaces
    interface LastFmApiService {
        @GET("?method=chart.gettoptracks&api_key=48c35185fae68f7b469b927e95bb79e1&format=json&limit=10")
        suspend fun getTrendingTracks(): TrendingTracksResponse
    }

    data class TrendingTracksResponse(
        @SerializedName("tracks") val tracks: TracksData
    )

    data class TracksData(
        @SerializedName("track") val track: List<TrendingTrack>
    )

    data class TrendingTrack(
        @SerializedName("name") val name: String,
        @SerializedName("artist") val artist: ArtistData,
        @SerializedName("image") val images: List<ImageData>
    )

    data class ArtistData(
        @SerializedName("name") val name: String
    )

    data class ImageData(
        @SerializedName("#text") val url: String,
        @SerializedName("size") val size: String
    )

    override fun onDestroy() {
        super.onDestroy()
        coroutineContext.cancelChildren()
        MusicService.unregisterClient(this)
        try {
            if (isBound) requireContext().unbindService(serviceConn)
        } catch (e: Exception) {
            Log.e("ServiceUnbindError", e.toString())
        }
    }
}